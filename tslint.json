{
  "rulesDirectory": ["codelyzer", "tslint-consistent-codestyle"],
  "extends": ["tslint-clean-code"],
  "rules": {
    "arrow-return-shorthand": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [false, "check-space"],
    "curly": true,
    "deprecation": {
      "severity": "warn"
    },
    "eofline": true,
    "forin": true,
    "import-blacklist": [true, "rxjs/Rx"],
    "import-spacing": true,
    "indent": [true, "spaces"],
    "interface-over-type-literal": true,
    "label-position": true,
    "max-line-length": [true, 140],
    "member-access": false,
    "member-ordering": [
      true,
      {
        "order": ["static-field", "instance-field", "static-method", "instance-method"]
      }
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [true, "debug", "info", "time", "timeEnd", "trace"],
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": false,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [true, "ignore-params", "ignore-properties"],
    "no-misused-new": true,
    "no-non-null-assertion": true,
    "no-redundant-jsdoc": true,
    "no-shadowed-variable": true,
    "no-string-literal": false,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "object-literal-sort-keys": false,
    "one-line": [true, "check-open-brace", "check-catch", "check-else", "check-whitespace"],
    "prefer-const": true,
    "quotemark": [true, "single"],
    "radix": false,
    "semicolon": [true, "always"],
    "triple-equals": [false, "allow-null-check"],
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "unified-signatures": true,
    "variable-name": false,
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    "no-output-on-prefix": false,
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "camelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // require all global constants to be camelCase or UPPER_CASE
      // all other variables and functions still need to be camelCase
      {
        "type": "variable",
        "modifiers": ["global", "const"],
        "format": ["camelCase", "UPPER_CASE"]
      },
      { "type": "parameter", "modifiers": "unused", "leadingUnderscore": "allow" },
      // require leading underscores for private properties and methods, all other rules still apply
      { "type": "member", "modifiers": "private", "leadingUnderscore": "require" },
      // same for protected
      { "type": "member", "modifiers": "protected", "leadingUnderscore": "require" },
      // exclicitly disable the format check only for method toJSON
      { "type": "method", "filter": "^toJSON$", "format": null },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      { "type": "type", "format": "PascalCase" }
    ],
    // Clean-Code Rules
    "try-catch-first": true,
    "newspaper-order": false,
    "no-flag-args": true,
    "no-for-each-push": true,
    "no-complex-conditionals": [true, 3],
    "prefer-dry-conditionals": [true, 3],
    "no-commented-out-code": true
  }
}
